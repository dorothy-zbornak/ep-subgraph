// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get fills(): Array<string> {
    let value = this.get("fills");
    return value.toStringArray();
  }

  set fills(value: Array<string>) {
    this.set("fills", Value.fromStringArray(value));
  }

  get nativeOrderFills(): Array<string> {
    let value = this.get("nativeOrderFills");
    return value.toStringArray();
  }

  set nativeOrderFills(value: Array<string>) {
    this.set("nativeOrderFills", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get rfqOrderVolume(): BigInt {
    let value = this.get("rfqOrderVolume");
    return value.toBigInt();
  }

  set rfqOrderVolume(value: BigInt) {
    this.set("rfqOrderVolume", Value.fromBigInt(value));
  }

  get limitOrderVolume(): BigInt {
    let value = this.get("limitOrderVolume");
    return value.toBigInt();
  }

  set limitOrderVolume(value: BigInt) {
    this.set("limitOrderVolume", Value.fromBigInt(value));
  }

  get swapVolume(): BigInt {
    let value = this.get("swapVolume");
    return value.toBigInt();
  }

  set swapVolume(value: BigInt) {
    this.set("swapVolume", Value.fromBigInt(value));
  }
}

export class Taker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Taker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Taker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Taker", id.toString(), this);
  }

  static load(id: string): Taker | null {
    return store.get("Taker", id) as Taker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swapCount(): BigInt {
    let value = this.get("swapCount");
    return value.toBigInt();
  }

  set swapCount(value: BigInt) {
    this.set("swapCount", Value.fromBigInt(value));
  }

  get nativeOrderFillCount(): BigInt {
    let value = this.get("nativeOrderFillCount");
    return value.toBigInt();
  }

  set nativeOrderFillCount(value: BigInt) {
    this.set("nativeOrderFillCount", Value.fromBigInt(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get nativeOrderFills(): Array<string> {
    let value = this.get("nativeOrderFills");
    return value.toStringArray();
  }

  set nativeOrderFills(value: Array<string>) {
    this.set("nativeOrderFills", Value.fromStringArray(value));
  }
}

export class Maker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Maker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Maker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Maker", id.toString(), this);
  }

  static load(id: string): Maker | null {
    return store.get("Maker", id) as Maker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nativeOrderFillCount(): BigInt {
    let value = this.get("nativeOrderFillCount");
    return value.toBigInt();
  }

  set nativeOrderFillCount(value: BigInt) {
    this.set("nativeOrderFillCount", Value.fromBigInt(value));
  }

  get nativeOrderFills(): Array<string> {
    let value = this.get("nativeOrderFills");
    return value.toStringArray();
  }

  set nativeOrderFills(value: Array<string>) {
    this.set("nativeOrderFills", Value.fromStringArray(value));
  }
}

export class Fill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Fill entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Fill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Fill", id.toString(), this);
  }

  static load(id: string): Fill | null {
    return store.get("Fill", id) as Fill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get provider(): Bytes | null {
    let value = this.get("provider");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set provider(value: Bytes | null) {
    if (value === null) {
      this.unset("provider");
    } else {
      this.set("provider", Value.fromBytes(value as Bytes));
    }
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get inputToken(): string {
    let value = this.get("inputToken");
    return value.toString();
  }

  set inputToken(value: string) {
    this.set("inputToken", Value.fromString(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get inputTokenAmount(): BigInt {
    let value = this.get("inputTokenAmount");
    return value.toBigInt();
  }

  set inputTokenAmount(value: BigInt) {
    this.set("inputTokenAmount", Value.fromBigInt(value));
  }

  get outputTokenAmount(): BigInt {
    let value = this.get("outputTokenAmount");
    return value.toBigInt();
  }

  set outputTokenAmount(value: BigInt) {
    this.set("outputTokenAmount", Value.fromBigInt(value));
  }
}

export class NativeOrderFill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NativeOrderFill entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NativeOrderFill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NativeOrderFill", id.toString(), this);
  }

  static load(id: string): NativeOrderFill | null {
    return store.get("NativeOrderFill", id) as NativeOrderFill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get orderHash(): Bytes {
    let value = this.get("orderHash");
    return value.toBytes();
  }

  set orderHash(value: Bytes) {
    this.set("orderHash", Value.fromBytes(value));
  }

  get taker(): string {
    let value = this.get("taker");
    return value.toString();
  }

  set taker(value: string) {
    this.set("taker", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get inputToken(): string {
    let value = this.get("inputToken");
    return value.toString();
  }

  set inputToken(value: string) {
    this.set("inputToken", Value.fromString(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get inputTokenAmount(): BigInt {
    let value = this.get("inputTokenAmount");
    return value.toBigInt();
  }

  set inputTokenAmount(value: BigInt) {
    this.set("inputTokenAmount", Value.fromBigInt(value));
  }

  get outputTokenAmount(): BigInt {
    let value = this.get("outputTokenAmount");
    return value.toBigInt();
  }

  set outputTokenAmount(value: BigInt) {
    this.set("outputTokenAmount", Value.fromBigInt(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get method(): string {
    let value = this.get("method");
    return value.toString();
  }

  set method(value: string) {
    this.set("method", Value.fromString(value));
  }

  get fills(): Array<string> {
    let value = this.get("fills");
    return value.toStringArray();
  }

  set fills(value: Array<string>) {
    this.set("fills", Value.fromStringArray(value));
  }

  get inputToken(): string {
    let value = this.get("inputToken");
    return value.toString();
  }

  set inputToken(value: string) {
    this.set("inputToken", Value.fromString(value));
  }

  get outputToken(): string {
    let value = this.get("outputToken");
    return value.toString();
  }

  set outputToken(value: string) {
    this.set("outputToken", Value.fromString(value));
  }

  get inputTokenAmount(): BigInt {
    let value = this.get("inputTokenAmount");
    return value.toBigInt();
  }

  set inputTokenAmount(value: BigInt) {
    this.set("inputTokenAmount", Value.fromBigInt(value));
  }

  get outputTokenAmount(): BigInt {
    let value = this.get("outputTokenAmount");
    return value.toBigInt();
  }

  set outputTokenAmount(value: BigInt) {
    this.set("outputTokenAmount", Value.fromBigInt(value));
  }

  get taker(): string {
    let value = this.get("taker");
    return value.toString();
  }

  set taker(value: string) {
    this.set("taker", Value.fromString(value));
  }

  get hint(): string | null {
    let value = this.get("hint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hint(value: string | null) {
    if (value === null) {
      this.unset("hint");
    } else {
      this.set("hint", Value.fromString(value as string));
    }
  }
}
